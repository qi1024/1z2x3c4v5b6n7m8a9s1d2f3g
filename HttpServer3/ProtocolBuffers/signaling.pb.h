// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: signaling.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_signaling_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_signaling_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "transfer.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_signaling_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_signaling_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_signaling_2eproto;
namespace signaling {
class Signaling;
struct SignalingDefaultTypeInternal;
extern SignalingDefaultTypeInternal _Signaling_default_instance_;
}  // namespace signaling
PROTOBUF_NAMESPACE_OPEN
template<> ::signaling::Signaling* Arena::CreateMaybeMessage<::signaling::Signaling>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace signaling {

// ===================================================================

class Signaling final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signaling.Signaling) */ {
 public:
  inline Signaling() : Signaling(nullptr) {}
  ~Signaling() override;
  explicit constexpr Signaling(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Signaling(const Signaling& from);
  Signaling(Signaling&& from) noexcept
    : Signaling() {
    *this = ::std::move(from);
  }

  inline Signaling& operator=(const Signaling& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signaling& operator=(Signaling&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Signaling& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signaling* internal_default_instance() {
    return reinterpret_cast<const Signaling*>(
               &_Signaling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Signaling& a, Signaling& b) {
    a.Swap(&b);
  }
  inline void Swap(Signaling* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signaling* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Signaling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Signaling>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Signaling& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Signaling& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signaling* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signaling.Signaling";
  }
  protected:
  explicit Signaling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 3,
    kFilesFieldNumber = 4,
    kRecordsFieldNumber = 5,
    kCommandFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // repeated .transfer.User users = 3;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::transfer::User* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transfer::User >*
      mutable_users();
  private:
  const ::transfer::User& _internal_users(int index) const;
  ::transfer::User* _internal_add_users();
  public:
  const ::transfer::User& users(int index) const;
  ::transfer::User* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transfer::User >&
      users() const;

  // repeated .transfer.File files = 4;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::transfer::File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transfer::File >*
      mutable_files();
  private:
  const ::transfer::File& _internal_files(int index) const;
  ::transfer::File* _internal_add_files();
  public:
  const ::transfer::File& files(int index) const;
  ::transfer::File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transfer::File >&
      files() const;

  // repeated .transfer.Record records = 5;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::transfer::Record* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transfer::Record >*
      mutable_records();
  private:
  const ::transfer::Record& _internal_records(int index) const;
  ::transfer::Record* _internal_add_records();
  public:
  const ::transfer::Record& records(int index) const;
  ::transfer::Record* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transfer::Record >&
      records() const;

  // string command = 1;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:signaling.Signaling)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transfer::User > users_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transfer::File > files_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transfer::Record > records_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signaling_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Signaling

// string command = 1;
inline void Signaling::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& Signaling::command() const {
  // @@protoc_insertion_point(field_get:signaling.Signaling.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Signaling::set_command(ArgT0&& arg0, ArgT... args) {
 
 command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:signaling.Signaling.command)
}
inline std::string* Signaling::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:signaling.Signaling.command)
  return _s;
}
inline const std::string& Signaling::_internal_command() const {
  return command_.Get();
}
inline void Signaling::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Signaling::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Signaling::release_command() {
  // @@protoc_insertion_point(field_release:signaling.Signaling.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Signaling::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:signaling.Signaling.command)
}

// string text = 2;
inline void Signaling::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& Signaling::text() const {
  // @@protoc_insertion_point(field_get:signaling.Signaling.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Signaling::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:signaling.Signaling.text)
}
inline std::string* Signaling::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:signaling.Signaling.text)
  return _s;
}
inline const std::string& Signaling::_internal_text() const {
  return text_.Get();
}
inline void Signaling::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Signaling::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Signaling::release_text() {
  // @@protoc_insertion_point(field_release:signaling.Signaling.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Signaling::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:signaling.Signaling.text)
}

// repeated .transfer.User users = 3;
inline int Signaling::_internal_users_size() const {
  return users_.size();
}
inline int Signaling::users_size() const {
  return _internal_users_size();
}
inline ::transfer::User* Signaling::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:signaling.Signaling.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transfer::User >*
Signaling::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:signaling.Signaling.users)
  return &users_;
}
inline const ::transfer::User& Signaling::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::transfer::User& Signaling::users(int index) const {
  // @@protoc_insertion_point(field_get:signaling.Signaling.users)
  return _internal_users(index);
}
inline ::transfer::User* Signaling::_internal_add_users() {
  return users_.Add();
}
inline ::transfer::User* Signaling::add_users() {
  ::transfer::User* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:signaling.Signaling.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transfer::User >&
Signaling::users() const {
  // @@protoc_insertion_point(field_list:signaling.Signaling.users)
  return users_;
}

// repeated .transfer.File files = 4;
inline int Signaling::_internal_files_size() const {
  return files_.size();
}
inline int Signaling::files_size() const {
  return _internal_files_size();
}
inline ::transfer::File* Signaling::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:signaling.Signaling.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transfer::File >*
Signaling::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:signaling.Signaling.files)
  return &files_;
}
inline const ::transfer::File& Signaling::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::transfer::File& Signaling::files(int index) const {
  // @@protoc_insertion_point(field_get:signaling.Signaling.files)
  return _internal_files(index);
}
inline ::transfer::File* Signaling::_internal_add_files() {
  return files_.Add();
}
inline ::transfer::File* Signaling::add_files() {
  ::transfer::File* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:signaling.Signaling.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transfer::File >&
Signaling::files() const {
  // @@protoc_insertion_point(field_list:signaling.Signaling.files)
  return files_;
}

// repeated .transfer.Record records = 5;
inline int Signaling::_internal_records_size() const {
  return records_.size();
}
inline int Signaling::records_size() const {
  return _internal_records_size();
}
inline ::transfer::Record* Signaling::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:signaling.Signaling.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transfer::Record >*
Signaling::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:signaling.Signaling.records)
  return &records_;
}
inline const ::transfer::Record& Signaling::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::transfer::Record& Signaling::records(int index) const {
  // @@protoc_insertion_point(field_get:signaling.Signaling.records)
  return _internal_records(index);
}
inline ::transfer::Record* Signaling::_internal_add_records() {
  return records_.Add();
}
inline ::transfer::Record* Signaling::add_records() {
  ::transfer::Record* _add = _internal_add_records();
  // @@protoc_insertion_point(field_add:signaling.Signaling.records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transfer::Record >&
Signaling::records() const {
  // @@protoc_insertion_point(field_list:signaling.Signaling.records)
  return records_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace signaling

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_signaling_2eproto
